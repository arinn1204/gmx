// Code generated by mockery v2.14.0. DO NOT EDIT.

package mbean

import (
	extensions "github.com/arinn1204/gmx/pkg/extensions"
	jnigi "tekao.net/jnigi"

	mock "github.com/stretchr/testify/mock"
)

// MockBeanExecutor is an autogenerated mock type for the BeanExecutor type
type MockBeanExecutor struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockBeanExecutor) Close() {
	_m.Called()
}

// Execute provides a mock function with given fields: operation
func (_m *MockBeanExecutor) Execute(operation Operation) (string, error) {
	ret := _m.Called(operation)

	var r0 string
	if rf, ok := ret.Get(0).(func(Operation) string); ok {
		r0 = rf(operation)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Operation) error); ok {
		r1 = rf(operation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnv provides a mock function with given fields:
func (_m *MockBeanExecutor) GetEnv() *jnigi.Env {
	ret := _m.Called()

	var r0 *jnigi.Env
	if rf, ok := ret.Get(0).(func() *jnigi.Env); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jnigi.Env)
		}
	}

	return r0
}

// RegisterClassHandler provides a mock function with given fields: typeName, handler
func (_m *MockBeanExecutor) RegisterClassHandler(typeName string, handler extensions.IHandler) error {
	ret := _m.Called(typeName, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, extensions.IHandler) error); ok {
		r0 = rf(typeName, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterInterfaceHandler provides a mock function with given fields: typeName, handler
func (_m *MockBeanExecutor) RegisterInterfaceHandler(typeName string, handler extensions.InterfaceHandler) error {
	ret := _m.Called(typeName, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, extensions.InterfaceHandler) error); ok {
		r0 = rf(typeName, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithEnvironment provides a mock function with given fields: env
func (_m *MockBeanExecutor) WithEnvironment(env *jnigi.Env) BeanExecutor {
	ret := _m.Called(env)

	var r0 BeanExecutor
	if rf, ok := ret.Get(0).(func(*jnigi.Env) BeanExecutor); ok {
		r0 = rf(env)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(BeanExecutor)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockBeanExecutor interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBeanExecutor creates a new instance of MockBeanExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBeanExecutor(t mockConstructorTestingTNewMockBeanExecutor) *MockBeanExecutor {
	mock := &MockBeanExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
