// Code generated by mockery v2.14.0. DO NOT EDIT.

package gmx

import mock "github.com/stretchr/testify/mock"

// MockMBeanOperator is an autogenerated mock type for the MBeanOperator type
type MockMBeanOperator struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockMBeanOperator) Close() {
	_m.Called()
}

// GetString provides a mock function with given fields: domain, beanName, operation, argName
func (_m *MockMBeanOperator) GetString(domain string, beanName string, operation string, argName string) (string, error) {
	ret := _m.Called(domain, beanName, operation, argName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, string) string); ok {
		r0 = rf(domain, beanName, operation, argName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(domain, beanName, operation, argName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Initialize provides a mock function with given fields:
func (_m *MockMBeanOperator) Initialize() {
	_m.Called()
}

// PutString provides a mock function with given fields: domain, name, operation, argName, arvValue
func (_m *MockMBeanOperator) PutString(domain string, name string, operation string, argName string, arvValue string) (string, error) {
	ret := _m.Called(domain, name, operation, argName, arvValue)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) string); ok {
		r0 = rf(domain, name, operation, argName, arvValue)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = rf(domain, name, operation, argName, arvValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockMBeanOperator interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMBeanOperator creates a new instance of MockMBeanOperator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMBeanOperator(t mockConstructorTestingTNewMockMBeanOperator) *MockMBeanOperator {
	mock := &MockMBeanOperator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
