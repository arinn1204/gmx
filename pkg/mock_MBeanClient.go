// Code generated by mockery v2.14.0. DO NOT EDIT.

package gmx

import (
	extensions "github.com/arinn1204/gmx/pkg/extensions"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockMBeanClient is an autogenerated mock type for the MBeanClient type
type MockMBeanClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockMBeanClient) Close() {
	_m.Called()
}

// Connect provides a mock function with given fields: hostname, port
func (_m *MockMBeanClient) Connect(hostname string, port int) (*uuid.UUID, error) {
	ret := _m.Called(hostname, port)

	var r0 *uuid.UUID
	if rf, ok := ret.Get(0).(func(string, int) *uuid.UUID); ok {
		r0 = rf(hostname, port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(hostname, port)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteAgainstAll provides a mock function with given fields: domain, name, operation, args
func (_m *MockMBeanClient) ExecuteAgainstAll(domain string, name string, operation string, args ...MBeanArgs) (map[uuid.UUID]string, map[uuid.UUID]error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, domain, name, operation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 map[uuid.UUID]string
	if rf, ok := ret.Get(0).(func(string, string, string, ...MBeanArgs) map[uuid.UUID]string); ok {
		r0 = rf(domain, name, operation, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]string)
		}
	}

	var r1 map[uuid.UUID]error
	if rf, ok := ret.Get(1).(func(string, string, string, ...MBeanArgs) map[uuid.UUID]error); ok {
		r1 = rf(domain, name, operation, args...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[uuid.UUID]error)
		}
	}

	return r0, r1
}

// ExecuteAgainstID provides a mock function with given fields: id, domain, name, operation, args
func (_m *MockMBeanClient) ExecuteAgainstID(id uuid.UUID, domain string, name string, operation string, args ...MBeanArgs) (string, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id, domain, name, operation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, string, string, ...MBeanArgs) string); ok {
		r0 = rf(id, domain, name, operation, args...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string, string, string, ...MBeanArgs) error); ok {
		r1 = rf(id, domain, name, operation, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: domain, beanName, attributeName
func (_m *MockMBeanClient) Get(domain string, beanName string, attributeName string) (map[uuid.UUID]string, map[uuid.UUID]error) {
	ret := _m.Called(domain, beanName, attributeName)

	var r0 map[uuid.UUID]string
	if rf, ok := ret.Get(0).(func(string, string, string) map[uuid.UUID]string); ok {
		r0 = rf(domain, beanName, attributeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]string)
		}
	}

	var r1 map[uuid.UUID]error
	if rf, ok := ret.Get(1).(func(string, string, string) map[uuid.UUID]error); ok {
		r1 = rf(domain, beanName, attributeName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[uuid.UUID]error)
		}
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id, domain, beanName, attributeName
func (_m *MockMBeanClient) GetById(id uuid.UUID, domain string, beanName string, attributeName string) (string, error) {
	ret := _m.Called(id, domain, beanName, attributeName)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, string, string) string); ok {
		r0 = rf(id, domain, beanName, attributeName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string, string, string) error); ok {
		r1 = rf(id, domain, beanName, attributeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Initialize provides a mock function with given fields:
func (_m *MockMBeanClient) Initialize() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: domain, beanName, attributeName, value
func (_m *MockMBeanClient) Put(domain string, beanName string, attributeName string, value interface{}) (map[uuid.UUID]string, map[uuid.UUID]error) {
	ret := _m.Called(domain, beanName, attributeName, value)

	var r0 map[uuid.UUID]string
	if rf, ok := ret.Get(0).(func(string, string, string, interface{}) map[uuid.UUID]string); ok {
		r0 = rf(domain, beanName, attributeName, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]string)
		}
	}

	var r1 map[uuid.UUID]error
	if rf, ok := ret.Get(1).(func(string, string, string, interface{}) map[uuid.UUID]error); ok {
		r1 = rf(domain, beanName, attributeName, value)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[uuid.UUID]error)
		}
	}

	return r0, r1
}

// PutById provides a mock function with given fields: id, domain, beanName, attributeName, value
func (_m *MockMBeanClient) PutById(id uuid.UUID, domain string, beanName string, attributeName string, value interface{}) (string, error) {
	ret := _m.Called(id, domain, beanName, attributeName, value)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, string, string, interface{}) string); ok {
		r0 = rf(id, domain, beanName, attributeName, value)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string, string, string, interface{}) error); ok {
		r1 = rf(id, domain, beanName, attributeName, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterClassHandler provides a mock function with given fields: typeName, handler
func (_m *MockMBeanClient) RegisterClassHandler(typeName string, handler extensions.IHandler) {
	_m.Called(typeName, handler)
}

// RegisterInterfaceHandler provides a mock function with given fields: typeName, handler
func (_m *MockMBeanClient) RegisterInterfaceHandler(typeName string, handler extensions.InterfaceHandler) {
	_m.Called(typeName, handler)
}

type mockConstructorTestingTNewMockMBeanClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMBeanClient creates a new instance of MockMBeanClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMBeanClient(t mockConstructorTestingTNewMockMBeanClient) *MockMBeanClient {
	mock := &MockMBeanClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
