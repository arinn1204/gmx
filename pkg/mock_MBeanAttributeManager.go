// Code generated by mockery v2.14.0. DO NOT EDIT.

package gmx

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockMBeanAttributeManager is an autogenerated mock type for the MBeanAttributeManager type
type MockMBeanAttributeManager struct {
	mock.Mock
}

// Get provides a mock function with given fields: domain, beanName, attributeName, args
func (_m *MockMBeanAttributeManager) Get(domain string, beanName string, attributeName string, args MBeanArgs) (map[uuid.UUID]string, map[uuid.UUID]error) {
	ret := _m.Called(domain, beanName, attributeName, args)

	var r0 map[uuid.UUID]string
	if rf, ok := ret.Get(0).(func(string, string, string, MBeanArgs) map[uuid.UUID]string); ok {
		r0 = rf(domain, beanName, attributeName, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]string)
		}
	}

	var r1 map[uuid.UUID]error
	if rf, ok := ret.Get(1).(func(string, string, string, MBeanArgs) map[uuid.UUID]error); ok {
		r1 = rf(domain, beanName, attributeName, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[uuid.UUID]error)
		}
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id, domain, beanName, attributeName, args
func (_m *MockMBeanAttributeManager) GetByID(id uuid.UUID, domain string, beanName string, attributeName string, args MBeanArgs) (string, error) {
	ret := _m.Called(id, domain, beanName, attributeName, args)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, string, string, MBeanArgs) string); ok {
		r0 = rf(id, domain, beanName, attributeName, args)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string, string, string, MBeanArgs) error); ok {
		r1 = rf(id, domain, beanName, attributeName, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: domain, beanName, attributeName, args
func (_m *MockMBeanAttributeManager) Put(domain string, beanName string, attributeName string, args MBeanArgs) (map[uuid.UUID]string, map[uuid.UUID]error) {
	ret := _m.Called(domain, beanName, attributeName, args)

	var r0 map[uuid.UUID]string
	if rf, ok := ret.Get(0).(func(string, string, string, MBeanArgs) map[uuid.UUID]string); ok {
		r0 = rf(domain, beanName, attributeName, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uuid.UUID]string)
		}
	}

	var r1 map[uuid.UUID]error
	if rf, ok := ret.Get(1).(func(string, string, string, MBeanArgs) map[uuid.UUID]error); ok {
		r1 = rf(domain, beanName, attributeName, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[uuid.UUID]error)
		}
	}

	return r0, r1
}

// PutByID provides a mock function with given fields: id, domain, beanName, attributeName, args
func (_m *MockMBeanAttributeManager) PutByID(id uuid.UUID, domain string, beanName string, attributeName string, args MBeanArgs) (string, error) {
	ret := _m.Called(id, domain, beanName, attributeName, args)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, string, string, MBeanArgs) string); ok {
		r0 = rf(id, domain, beanName, attributeName, args)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, string, string, string, MBeanArgs) error); ok {
		r1 = rf(id, domain, beanName, attributeName, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockMBeanAttributeManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMBeanAttributeManager creates a new instance of MockMBeanAttributeManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMBeanAttributeManager(t mockConstructorTestingTNewMockMBeanAttributeManager) *MockMBeanAttributeManager {
	mock := &MockMBeanAttributeManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
